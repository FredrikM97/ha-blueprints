blueprint:
  name: Tradfri E2001/E2002 light Switch
  description: >
    Control light or group of lights with a Tradfri E2001/E2002 remote.
  domain: automation
  input:
    source_switch_action:
      name: Tradfri E2001/E2002 Switch
      description: Switch triggers action.
      selector:
        device:
          integration: mqtt  # This filters for MQTT devices
    target_light:
      name: Target Light
      description: The light/group entity to control.
      selector:
        target: {}
    color_cycle_map:
      name: Color Temperature Cycle Map
      description: The list of color temperatures to cycle through.
      default: [250, 294, 375, 454]
      selector:
        entity:
          multiple: true
  source_url: https://gist.github.com/FredrikM97/12d2a59038e24b3135aea5691d802bac

alias: Tradfri E2001/E2002 light switch
description: ''
trigger:
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: "on"
    id: "on"
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: "off"
    id: "off"
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: brightness_move_up
    id: brightness_move_up
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: brightness_move_down
    id: brightness_move_down
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: arrow_left_click
    id: arrow_left_click
  - platform: device
    device_id: !input source_switch_action
    domain: mqtt
    type: action
    subtype: arrow_right_click
    id: arrow_right_click

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: 'on'
        sequence:
          - service: light.turn_on
            data: {}
            target: !input target_light
      - conditions:
          - condition: trigger
            id: 'off'
        sequence:
          - service: light.turn_off
            data: {}
            target: !input target_light
      - conditions:
          - condition: trigger
            id: brightness_move_up
        sequence:
          - repeat:
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: 5
                    transition: 0.2
                  target: !input target_light
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: 100
              count: 50
      - conditions:
          - condition: trigger
            id: brightness_move_down
        sequence:
          - repeat:
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: -5
                    transition: 0.2
                  target: !input target_light
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 0
                    milliseconds: 100
              count: 50
      - conditions:
          - condition: trigger
            id: arrow_left_click
        sequence:
          - variables:
              light_state: !input target_light
              current_temp: >
                {{ state_attr(light_state.entity_id, 'color_temp') }}
              cycle_map: !input color_cycle_map
              next_temp: >
                {{ cycle_map[(cycle_map.index(current_temp) + -1) % cycle_map|length] if current_temp in cycle_map else 375 }}
          - service: light.turn_on
            target: !input target_light
            data:
              transition: 1
              color_temp: "{{ next_temp }}"
          - service: persistent_notification.create
            data:
              message: "New color temperature for {{ target_light.entity_id }}: {{ next_temp }}"
              title: Light Color Temp Updated
            enabled: false
      - conditions:
          - condition: trigger
            id: arrow_right_click
        sequence:
          - variables:
              light_state: !input target_light
              current_temp: >
                {{ state_attr(light_state.entity_id, 'color_temp') }}
              cycle_map: !input color_cycle_map
              next_temp: >
                {{ cycle_map[(cycle_map.index(current_temp) + 1) % cycle_map|length] if current_temp in cycle_map else 375 }}
          - service: light.turn_on
            target: !input target_light
            data:
              transition: 1
              color_temp: "{{ next_temp }}"
          - service: persistent_notification.create
            data:
              message: "New color temperature for {{ target_light.entity_id }}: {{ next_temp }}"
              title: Light Color Temp Updated
            enabled: false

mode: restart
